{"ast":null,"code":"import _asyncToGenerator from \"/Users/anton/Desktop/projects/cinema-app-ang/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, catchError, map, of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HttpService {\n  constructor(http) {\n    this.http = http;\n    this.items$ = new BehaviorSubject([]);\n    this.api = \"https://raw.githubusercontent.com/antonkapustin/cinema-app-ang/main/src/data.json\";\n  }\n\n  getData() {\n    const data = this.http.get(this.api).pipe(map(response => {\n      this.updateItems(response);\n      return response;\n    }), catchError(this.handleError(\"GetData\")));\n    return data;\n  }\n\n  updateItems(data) {\n    this.items$.next(data);\n  }\n\n  getItems() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let data = yield _this.items$.getValue();\n      return data;\n    })();\n  }\n\n  getItems$() {\n    return this.items$;\n  }\n\n  handleError(operation = \"operation\", result) {\n    return error => {\n      console.error(error);\n      return of(result);\n    };\n  }\n\n}\n\nHttpService.ɵfac = function HttpService_Factory(t) {\n  return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nHttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpService,\n  factory: HttpService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"sources":["/Users/anton/Desktop/projects/cinema-app-ang/src/app/http.service.ts"],"names":["BehaviorSubject","catchError","map","of","i0","i1","HttpService","constructor","http","items$","api","getData","data","get","pipe","response","updateItems","handleError","next","getItems","getValue","getItems$","operation","result","error","console","ɵfac","HttpService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,eAAT,EAA0BC,UAA1B,EAAsCC,GAAtC,EAA2CC,EAA3C,QAAqD,MAArD;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,IAAIT,eAAJ,CAAoB,EAApB,CAAd;AACA,SAAKU,GAAL,GAAW,mFAAX;AACH;;AACDC,EAAAA,OAAO,GAAG;AACN,UAAMC,IAAI,GAAG,KAAKJ,IAAL,CAAUK,GAAV,CAAc,KAAKH,GAAnB,EAAwBI,IAAxB,CAA6BZ,GAAG,CAAEa,QAAD,IAAc;AACxD,WAAKC,WAAL,CAAiBD,QAAjB;AACA,aAAOA,QAAP;AACH,KAH4C,CAAhC,EAGTd,UAAU,CAAC,KAAKgB,WAAL,CAAiB,SAAjB,CAAD,CAHD,CAAb;AAIA,WAAOL,IAAP;AACH;;AACDI,EAAAA,WAAW,CAACJ,IAAD,EAAO;AACd,SAAKH,MAAL,CAAYS,IAAZ,CAAiBN,IAAjB;AACH;;AACKO,EAAAA,QAAQ,GAAG;AAAA;;AAAA;AACb,UAAIP,IAAI,SAAS,KAAI,CAACH,MAAL,CAAYW,QAAZ,EAAjB;AACA,aAAOR,IAAP;AAFa;AAGhB;;AACDS,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKZ,MAAZ;AACH;;AACDQ,EAAAA,WAAW,CAACK,SAAS,GAAG,WAAb,EAA0BC,MAA1B,EAAkC;AACzC,WAAQC,KAAD,IAAW;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,aAAOrB,EAAE,CAACoB,MAAD,CAAT;AACH,KAHD;AAIH;;AA5BoB;;AA8BzBjB,WAAW,CAACoB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAItB,WAAV,EAAuBF,EAAE,CAACyB,QAAH,CAAYxB,EAAE,CAACyB,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACAxB,WAAW,CAACyB,KAAZ,GAAoB,aAAc3B,EAAE,CAAC4B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE3B,WAAT;AAAsB4B,EAAAA,OAAO,EAAE5B,WAAW,CAACoB,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { BehaviorSubject, catchError, map, of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HttpService {\n    constructor(http) {\n        this.http = http;\n        this.items$ = new BehaviorSubject([]);\n        this.api = \"https://raw.githubusercontent.com/antonkapustin/cinema-app-ang/main/src/data.json\";\n    }\n    getData() {\n        const data = this.http.get(this.api).pipe(map((response) => {\n            this.updateItems(response);\n            return response;\n        }), catchError(this.handleError(\"GetData\")));\n        return data;\n    }\n    updateItems(data) {\n        this.items$.next(data);\n    }\n    async getItems() {\n        let data = await this.items$.getValue();\n        return data;\n    }\n    getItems$() {\n        return this.items$;\n    }\n    handleError(operation = \"operation\", result) {\n        return (error) => {\n            console.error(error);\n            return of(result);\n        };\n    }\n}\nHttpService.ɵfac = function HttpService_Factory(t) { return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient)); };\nHttpService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HttpService, factory: HttpService.ɵfac, providedIn: \"root\" });\n"]},"metadata":{},"sourceType":"module"}